name: PR Code Quality and AI Summary

on:
  pull_request:
    types: [ opened, synchronize ]  # PR이 열리거나 업데이트될 때 트리거

permissions:
  contents: read  # 리포지토리의 콘텐츠를 읽을 수 있음
  pull-requests: write  # PR에 댓글을 작성할 수 있음
  checks: write

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Build and Test Backend
        id: build
        run: ./gradlew build test
        continue-on-error: true

  code-quality:
    needs: build-test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        tool: [ checkstyle, pmd, spotbugs, jacoco ]
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Run Checkstyle
        if: matrix.tool == 'checkstyle'
        run: ./gradlew checkstyleMain checkstyleTest
      - name: Publish Checkstyle report
        if: matrix.tool == 'checkstyle'
        uses: lcollins/checkstyle-github-action@v3.1.0
        with:
          path: '**/build/reports/checkstyle/**.xml'
          title: 📝 Checkstyle report

      - name: Run PMD
        if: matrix.tool == 'pmd'
        run: ./gradlew pmdMain pmdTest
      - name: Publish PMD report
        if: matrix.tool == 'pmd'
        uses: lcollins/pmd-github-action@v3.1.0
        with:
          path: '**/build/reports/pmd/**.xml'
          title: 🔍 PMD report

      - name: Run SpotBugs
        if: matrix.tool == 'spotbugs'
        run: ./gradlew spotbugsMain spotbugsTest
      - name: Publish SpotBugs report
        if: matrix.tool == 'spotbugs'
        uses: lcollins/spotbugs-github-action@v3.1.0
        with:
          path: '**/build/reports/spotbugs/**.xml'
          title: 🐞 SpotBugs report

      - name: Run JaCoCo
        if: matrix.tool == 'jacoco'
        run: ./gradlew jacocoTestReport
      - name: Publish JaCoCo report
        if: matrix.tool == 'jacoco'
        uses: PavanMudigonda/jacoco-reporter@v5.0
        with:
          coverage_results_path: 'build/reports/jacoco/test/jacocoTestReport.xml'
          coverage_report_name: Coverage
          coverage_report_title: 📖 JaCoCo Coverage Report

  ai-summary:
    needs: code-quality  # 코드 품질 검사 완료 후 실행됨
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'  # 최신 Node.js 버전 설정

      - name: Install Dependencies
        run: npm install @google/generative-ai

      - name: Generate AI Review
        id: generate-review
        run: |
          node -e "
          const fs = require('fs');
          const { GoogleGenerativeAI } = require('@google/generative-ai');

          const readReport = (filePath) => {
            try {
              return fs.readFileSync(filePath, 'utf8');
            } catch (error) {
              console.error(\`Error reading \${filePath}:\`, error);
              return '';
            }
          };

          const reports = {
            checkstyle: readReport('build/reports/checkstyle/main.xml'),
            pmd: readReport('build/reports/pmd/main.xml'),
            spotbugs: readReport('build/reports/spotbugs/main.xml'),
            jacoco: readReport('build/reports/jacoco/test/jacocoTestReport.xml'),
          };

          const { GoogleGenerativeAI } = require("@google/generative-ai");
          const genAI = new GoogleGenerativeAI("${{ secrets.GEMINI_API_KEY }}");  // Gemini API 키로 생성자 인스턴스 생성
          const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });  // Gemini 모델 설정

          const prompt = \`
            다음 정보를 기반으로 코드 품질 검사 결과를 분석해주세요.
            - Checkstyle:\n\${reports.checkstyle}
            - PMD:\n\${reports.pmd}
            - SpotBugs:\n\${reports.spotbugs}
            - JaCoCo:\n\${reports.jacoco}

            주요 문제점 정리, 개선사항 제시, 종합 평가를 마크다운 형식으로 작성해주세요.
          \`;

          async function generateReview() {
            try {
              const result = await model.generateContent(prompt);
              const response = await result.response;
              const text = await response.text();

              if (!text || text.trim().length === 0) {
                console.log('❌ Gemini API 응답이 비어 있습니다.');
                throw new Error('Gemini API 응답이 비어 있습니다.');
              }

              fs.writeFileSync('review_result.txt', text);
              console.log('✅ Gemini API 응답을 review_result.txt 파일에 저장했습니다.');
            } catch (error) {
              console.error('❌ Gemini API 요청 중 오류 발생:', error);
              process.exit(1);
            }
          }

          generateReview();
          "

      - name: Format PR Review Summary for Comment
        id: store-comment
        run: |
          COMMENT_STRING=$(cat review_result.txt)

          echo "comment<<EOF" >> $GITHUB_OUTPUT
          echo "# 코드 품질 AI PR 요약" >> $GITHUB_OUTPUT
          echo "$COMMENT_STRING" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Post PR Summary Comment
        uses: mshick/add-pr-comment@v2
        with:
          message: ${{ steps.store-comment.outputs.comment }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
