name: PR Code Quality Check and AI Review

on:
  pull_request:
    types: [ opened, synchronize ]

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Run Checkstyle
        run: ./gradlew checkstyleMain checkstyleTest

      - name: Run PMD
        run: ./gradlew pmdMain pmdTest

      - name: Run SpotBugs
        run: ./gradlew spotbugsMain spotbugsTest

      - name: Run JaCoCo
        run: ./gradlew jacocoTestReport

      - name: Generate Combined Report
        run: |
          echo "# Code Quality Report" > combined_report.md
          echo "## Checkstyle" >> combined_report.md
          cat build/reports/checkstyle/main.xml >> combined_report.md
          echo "## PMD" >> combined_report.md
          cat build/reports/pmd/main.xml >> combined_report.md
          echo "## SpotBugs" >> combined_report.md
          cat build/reports/spotbugs/main.xml >> combined_report.md
          echo "## JaCoCo" >> combined_report.md
          cat build/reports/jacoco/test/jacocoTestReport.xml >> combined_report.md

      - name: Upload Combined Report
        uses: actions/upload-artifact@v3
        with:
          name: code-quality-report
          path: combined_report.md

  ai-review:
    needs: code-quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Download Code Quality Report
        uses: actions/download-artifact@v3
        with:
          name: code-quality-report

      - name: Set up Node.js
        uses: actions/setup-node@v3

      - name: Install Gemini AI Dependencies
        run: npm install @google/generative-ai

      - name: Generate AI Review
        id: ai_review
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require("fs");
            const { GoogleGenerativeAI } = require("@google/generative-ai");
            
            const report = fs.readFileSync("combined_report.md", 'utf8');
            const genAI = new GoogleGenerativeAI("${{ secrets.GEMINI_API_KEY }}");
            const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
            
            const prompt = `
            다음은 코드 품질 검사 결과입니다. 이 결과를 분석하고 주요 문제점과 개선 사항을 요약해주세요.
            결과는 다음 형식으로 작성해주세요:
            
            ### 코드 품질 분석 요약
            
            #### 주요 문제점:
            1. [문제점 1]
            2. [문제점 2]
            ...
            
            #### 개선 사항:
            1. [개선 사항 1]
            2. [개선 사항 2]
            ...
            
            #### 종합 평가:
            [전반적인 코드 품질에 대한 평가와 조언]
            
            ${report}
            `;
            
            try {
              const result = await model.generateContent(prompt);
              const response = await result.response;
              const text = response.text();
            
              fs.writeFileSync('ai_review.md', text);
              console.log("AI 리뷰 생성 완료");
            } catch (error) {
              console.error("AI 리뷰 생성 중 오류 발생:", error);
              process.exit(1);
            }

      - name: Comment PR
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs')
            const aiReview = fs.readFileSync('ai_review.md', 'utf8')
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: aiReview
            })