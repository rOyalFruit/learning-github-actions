name: PR Code Quality Check and AI Review

on:
  pull_request:
    types: [ opened, synchronize ]

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Run Code Quality Checks
        run: |
          ./gradlew checkstyleMain checkstyleTest
          ./gradlew pmdMain pmdTest
          ./gradlew spotbugsMain spotbugsTest
          ./gradlew jacocoTestReport

      - name: Upload Checkstyle Report
        uses: actions/upload-artifact@v4
        with:
          name: checkstyle-report
          path: build/reports/checkstyle/main.xml

      - name: Upload PMD Report
        uses: actions/upload-artifact@v4
        with:
          name: pmd-report
          path: build/reports/pmd/main.xml

      - name: Upload SpotBugs Report
        uses: actions/upload-artifact@v4
        with:
          name: spotbugs-report
          path: build/reports/spotbugs/main.xml

      - name: Upload JaCoCo Report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: build/reports/jacoco/test/jacocoTestReport.xml

  ai-review:
    needs: code-quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download Checkstyle Report
        uses: actions/download-artifact@v4
        with:
          name: checkstyle-report

      - name: Download PMD Report
        uses: actions/download-artifact@v4
        with:
          name: pmd-report

      - name: Download SpotBugs Report
        uses: actions/download-artifact@v4
        with:
          name: spotbugs-report

      - name: Download JaCoCo Report
        uses: actions/download-artifact@v4
        with:
          name: jacoco-report

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Generate AI Review and Post as Comment
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          node -e "
            const fs = require('fs');
            const { GoogleGenerativeAI } = require('@google/generative-ai');

            const readReport = (filePath) => {
              try {
                return fs.readFileSync(filePath, 'utf8');
              } catch (error) {
                console.error(\`Error reading \${filePath}:\`, error);
                return '';
              }
            };

            const reports = {
              checkstyle: readReport('checkstyle-report/main.xml'),
              pmd: readReport('pmd-report/main.xml'),
              spotbugs: readReport('spotbugs-report/main.xml'),
              jacoco: readReport('jacoco-report/test/jacocoTestReport.xml'),
            };

            const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
            const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });

            const prompt = \`
            코드 품질 검사 결과를 분석해주세요. 다음 정보를 기반으로:
            - Checkstyle 결과:\\n\${reports.checkstyle}
            - PMD 결과:\\n\${reports.pmd}
            - SpotBugs 결과:\\n\${reports.spotbugs}
            - JaCoCo 결과:\\n\${reports.jacoco}

            주요 문제점 3개, 개선사항 3개, 종합 평가를 마크다운 형식으로 작성해주세요.
            \`;

            async function generateReview() {
              try {
                const result = await model.generateContent(prompt);
                const response = await result.response;
                const text = response.text();

                fs.writeFileSync('ai_review.md', text);
                console.log('AI 리뷰 생성 완료');
              } catch (error) {
                console.error('Error generating review:', error);
                process.exit(1);
              }
            }

            generateReview();
          "

      - name: Post AI Review as PR Comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const review = fs.readFileSync('ai_review.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## AI 코드 리뷰 결과\n\n${review}`
            });
