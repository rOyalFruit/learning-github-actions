on:
  pull_request:
    types: [ opened, synchronize ]  # PR 생성 또는 업데이트 시 실행

jobs:
  pr-summary:
    runs-on: ubuntu-latest  # 실행 환경 지정

    permissions:
      contents: read
      pull-requests: write  # PR에 코멘트 작성 권한 필요

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3  # 리포지토리 코드 체크아웃
        with:
          fetch-depth: 0  # 전체 히스토리 필요

      - name: Set up Node.js
        uses: actions/setup-node@v3  # Node.js 환경 설정

      - name: Install Gemini AI Dependencies
        run: npm install @google/generative-ai  # Gemini API 의존성 설치

      # Git diff 생성 단계
      - name: Fetch and Generate Git Diff for PR
        run: |
          git fetch origin "${{ github.event.pull_request.base.ref }}"
          git fetch origin "${{ github.event.pull_request.head.ref }}"
          git diff --unified=0 "origin/${{ github.event.pull_request.base.ref }}" > diff.txt

      # Gemini API 호출 단계
      - name: Call Gemini API to Generate PR Summary
        id: gemini_review
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require("fs");
            const diff_output = fs.readFileSync("diff.txt", 'utf8');
            
            const { GoogleGenerativeAI } = require("@google/generative-ai");
            const genAI = new GoogleGenerativeAI("${{ secrets.GEMINI_API_KEY }}");
            const model = genAI.getGenerativeModel({ model: "gemini-2.0-pro-exp-02-05" });

            let prompt = `
              다음은 깃허브 PR 에 올라온 수정된 코드들 입니다.
              Git diff를 분석하고, 각 변경 사항에 대해 파일명, 수정 내용, 역할을 아래와 같은 형식을 반드시 유지하여 요약해 주세요.

              가장 첫 부분에는 이 PR을 최종 요약하여 알려주세요. 최종 요약 부분의 제목은 "### PR 요약 :" 으로 해주세요.
              PR 요약의 모든 문장은 끝나면 로 띄어주세요. PR 요약이 끝난 후에는 을 하나 넣어주세요.

              ### 
              - **역할 :**
              (이 변경 사항의 역할 예: 기능 추가, 버그 수정, 리펙토링 등)
            
              - **변경 내용 :**
              (변경된 내용의 간략한 설명. 모든 문장은 끝나면 로 띄어주세요.)

              각 파일 내용이 끝나면 로 한 줄을 띄워주세요.
            
              ${diff_output}`;

            try {
              const result = await model.generateContent(prompt);
              const text = await result.response.text();
              fs.writeFileSync('review_result.txt', text);
              return text;  // 결과 반환
            } catch (error) {
              console.error("Gemini API 요청 중 오류 발생:", error);
              process.exit(1);
            }

      # 결과 포맷팅 단계 추가
      - name: Format PR Review Summary for Comment
        id: store
        run: |
          COMMENT_STRING=$(cat review_result.txt)
          
          # 줄바꿈 처리
          echo "comment> $GITHUB_OUTPUT
          echo "# AI PR 요약" >> $GITHUB_OUTPUT
          echo -e "$COMMENT_STRING" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # PR에 코멘트 추가
      - name: Post PR Summary Comment
        uses: mshick/add-pr-comment@v2
        with:
          message: ${{ steps.store.outputs.comment }}